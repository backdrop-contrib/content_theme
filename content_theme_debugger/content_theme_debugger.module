<?php

/**
 * @file
 * This module displays a list of modules which override the system default
 * theme sorted by module's call-up.
 */


/**
 * Implements hook_block_info().
 */
function content_theme_debugger_block_info() {

  $info = array();
  $info['content_theme_debugger'] = array(
    'info' => t('Content Theme Debugger'),
    'description' => t('List of modules which override the system default theme.'),
    'cache' => BACKDROP_NO_CACHE,
  );

  return $info;
}


/**
 * Implements hook_block_configure().
 */
function content_theme_debugger_block_configure($delta = '') {

  $form = array();

  if ($delta == 'content_theme_debugger') {

    $form['content_theme_debugger_blacklist'] = array(
      '#type' => 'textarea',
      '#title' => t('Blacklist'),
      '#description' => t('Enter one module per line of each modules that should not execute <em>hook_custom_theme()</em>. Example modules are <em>og</em> for the Organic Groups module and <em>views</em> for the Views module.'),
      '#default_value' => config_get('content_theme_debugger.settings', 'blacklist'),
    );
  }

  return $form;
}


/**
 * Implements hook_block_save().
 */
function content_theme_debugger_block_save($delta = '', $edit = array()) {

  if ($delta == 'content_theme_debugger') {

    config_set('content_theme_debugger.settings', 'blacklist', $edit['content_theme_debugger_blacklist']);
  }
}


/**
 * Implements hook_block_view().
 */
function content_theme_debugger_block_view($delta = '') {

  $block = array();

  if ($delta == 'content_theme_debugger') {

    $content_theme_debugger_blacklist = config_get('content_theme_debugger.settings', 'blacklist');
    $blacklist = preg_split("/\r\n|\n|\r|\s/", $content_theme_debugger_blacklist, -1, PREG_SPLIT_NO_EMPTY);

    $items = array();
    $items[] = t('Default theme: %theme', array('%theme' => content_theme_get_themes(config_get('system.core', 'theme_default'))));

    foreach (module_implements('custom_theme') as $module) {

      if (!in_array($module, $blacklist)) {

        $custom_theme = module_invoke($module, 'custom_theme');
        if (is_array($custom_theme)) {
          // Workaround for the Role Theme Switcher module,
          // which returns an array instead of a string.
          $custom_theme = array_pop($custom_theme);
        }
        if (!is_null($custom_theme)) {
          $items[] = t('Theme %theme is set by %module', array('%theme' => content_theme_get_themes($custom_theme), '%module' => $module .'_custom_theme()'));
        }
      }
    }

    $block['subject'] = t('Content Theme Debugger');
    $block['content'] = theme('item_list', array('items' => $items));
  }

  return $block;
}


/**
 * Implements hook_config_info().
 */
function content_theme_debugger_config_info() {

  $prefixes = array();
  $prefixes['content_theme_debugger.settings'] = array(
    'label' => t('Content Theme Debugger settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}
