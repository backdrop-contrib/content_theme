<?php

/**
 * @file
 * This module allows to use different themes than the site default on content
 * creating, editing, and viewing pages.
 */


/**
 * Implements hook_permission().
 */
function content_theme_permission() {

  $perm = array();
  foreach (node_type_get_types() as $name => $type) {

    $perm["select $name content editing theme"] = array(
      'title' => t('%type_name: Select content editing theme', array('%type_name' => $type->name)),
    );
    $perm["select $name content viewing theme"] = array(
      'title' => t('%type_name: Select content viewing theme', array('%type_name' => $type->name)),
    );
  }

  return $perm;
}


/**
 * Implements hook_menu().
 */
function content_theme_menu() {

  $items['admin/appearance/content-theme'] = array(
    'title' => 'Content theme',
    'description' => 'Configure which theme is used when content is created, edited or be viewed.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('content_theme_admin_content_wide'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
    'file' => 'content_theme.admin.inc',
  );
  $items['admin/appearance/content-theme/content-wide'] = array(
    'title' => 'Content wide',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/appearance/content-theme/content-type'] = array(
    'title' => 'Content type',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('content_theme_admin_content_type'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'content_theme.admin.inc',
  );
  $items['admin/appearance/content-theme/content-node'] = array(
    'title' => 'Content node',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('content_theme_admin_content_node'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'content_theme.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_custom_theme().
 */
function content_theme_custom_theme() {

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    if (arg(2) == 'edit') {
      // Edit content node.

      $custom_theme = db_query('SELECT theme_edit FROM {content_theme_node} WHERE nid = :nid', array(':nid' => arg(1)))->fetchField();
      if (empty($custom_theme) || $custom_theme == '-content_type-') {
        $type = db_query('SELECT type FROM {node} WHERE nid = :nid', array(':nid' => arg(1)))->fetchField();
        $custom_theme = config_get('node.type.' . $type, 'settings.content_theme_edit');
      }
      if (empty($custom_theme) || $custom_theme == '-content_wide-') {
        $custom_theme = config_get('content_theme.content_wide', 'content_theme_edit');
      }
      return $custom_theme != '-system_default-' ? $custom_theme : NULL;
    }
    else {
      // View content node.

      $custom_theme = db_query('SELECT theme_view FROM {content_theme_node} WHERE nid = :nid', array(':nid' => arg(1)))->fetchField();
      if (empty($custom_theme) || $custom_theme == '-content_type-') {
        $type = db_query('SELECT type FROM {node} WHERE nid = :nid', array(':nid' => arg(1)))->fetchField();
        $custom_theme = config_get('node.type.' . $type, 'settings.content_theme_view');
      }
      if (empty($custom_theme) || $custom_theme == '-content_wide-') {
        $custom_theme = config_get('content_theme.content_wide', 'content_theme_view');
      }
      return $custom_theme != '-system_default-' ? $custom_theme : NULL;
    }
  }
  elseif (arg(0) == 'node' && arg(1) == 'add' && !is_null(arg(2))) {
    // Add content node.

    $custom_theme = config_get('node.type.' . strtr(arg(2), array('-' => '_')), 'settings.content_theme_edit');
    if (empty($custom_theme) || $custom_theme == '-content_wide-') {
      $custom_theme = config_get('content_theme.content_wide', 'content_theme_edit');
    }
    return $custom_theme != '-system_default-' ? $custom_theme : NULL;
  }
}


/**
 * Implements hook_config_info().
 */
function content_theme_config_info() {

  $prefixes['content_theme.content_wide'] = array(
    'label' => t('Content wide settings'),
    'group' => t('Content theme'),
  );

  return $prefixes;
}


/**
 * Implements hook_node_type_load().
 */
function content_theme_node_type_load(&$types) {

  foreach ($types as $type_name => $type) {

    $types[$type_name]->settings += array(
      'content_theme_edit' => '-content_wide-',
      'content_theme_view' => '-content_wide-',
    );
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Configure content type themes.
 */
function content_theme_form_node_type_form_alter(&$form, $form_state) {

  if (isset($form['type'])) {
    $node_type = $form['#node_type'];

    $form['content_theme'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content theme settings'),
      '#description' => t('Applies to all content based on this content type and overrides content wide themes and the system default. But these settings can be overridden by content node settings.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('content-theme-settings-form'),
      ),
      '#attached' => array(
        'js' => array(backdrop_get_path('module', 'content_theme') . '/js/content_theme.js'),
      ),
      '#access' => user_access('administer themes'),
      '#weight' => 40,
    );
    $form['content_theme']['content_theme_edit'] = array(
      '#type' => 'select',
      '#title' => t('Creating & editing theme'),
      '#description' => t('Choose which theme the content creating and editing pages should display in. Default: %default_theme.', array('%default_theme' => t('Content wide theme'))),
      '#default_value' => $node_type->settings['content_theme_edit'],
      '#options' => content_theme_get_themes_options_content_type(),
    );
    $form['content_theme']['content_theme_view'] = array(
      '#type' => 'select',
      '#title' => t('Viewing theme'),
      '#description' => t('Choose which theme the content viewing pages should display in. Default: %default_theme.', array('%default_theme' => t('Content wide theme'))),
      '#default_value' => $node_type->settings['content_theme_view'],
      '#options' => content_theme_get_themes_options_content_type(),
    );
  }
}


/**
 * Implements hook_node_load().
 */
function content_theme_node_load($nodes, $types) {

  foreach ($nodes as $nid => $node) {

    $content_theme_node = db_query('SELECT theme_edit, theme_view FROM {content_theme_node} WHERE nid = :nid', array(':nid' => $node->nid))->fetchObject();
    $nodes[$nid]->content_theme_edit = !empty($content_theme_node) ? $content_theme_node->theme_edit : '-content_type-';
    $nodes[$nid]->content_theme_view = !empty($content_theme_node) ? $content_theme_node->theme_view : '-content_type-';
  }
}


/**
 * Implements hook_node_insert().
 */
function content_theme_node_insert(Node $node) {

  if ($node->content_theme_edit != '-content_type-' || $node->content_theme_view != '-content_type-') {
    db_insert('content_theme_node')
      ->fields(array(
        'nid' => $node->nid,
        'theme_edit' => $node->content_theme_edit,
        'theme_view' => $node->content_theme_view
      ))
      ->execute();
  }
}


/**
 * Implements hook_node_update().
 */
function content_theme_node_update(Node $node) {

  content_theme_node_delete($node);
  content_theme_node_insert($node);
}


/**
 * Implements hook_node_delete().
 */
function content_theme_node_delete(Node $node) {

  db_delete('content_theme_node')
    ->condition('nid', $node->nid)
    ->execute();
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Configure content node themes.
 */
function content_theme_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];

  $form['content_theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content theme settings'),
    '#description' => t('Applies only to this content node and overrides the content type themes, content wide themes, and the system default.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('content-theme-settings-form'),
    ),
    '#attached' => array(
      'js' => array(backdrop_get_path('module', 'content_theme') . '/js/content_theme.js'),
    ),
    '#access' => user_access('select '. $node->type .' content editing theme') || user_access('select '. $node->type .' content viewing theme'),
    '#weight' => 40,
  );
  $form['content_theme']['content_theme_edit'] = array(
    '#type' => 'select',
    '#title' => t('Editing theme'),
    '#description' => t('Choose which theme the content editing pages should display in. Default: %default_theme.', array('%default_theme' => t('Content type theme'))),
    '#default_value' => isset($node->content_theme_edit) ? $node->content_theme_edit : '-content_type-',
    '#options' => content_theme_get_themes_options_content_node(),
    '#access' => user_access('select '. $node->type .' content editing theme'),
  );
  $form['content_theme']['content_theme_view'] = array(
    '#type' => 'select',
    '#title' => t('Viewing theme'),
    '#description' => t('Choose which theme the content viewing pages should display in. Default: %default_theme.', array('%default_theme' => t('Content type theme'))),
    '#default_value' => isset($node->content_theme_view) ? $node->content_theme_view : '-content_type-',
    '#options' => content_theme_get_themes_options_content_node(),
    '#access' => user_access('select '. $node->type .' content viewing theme'),
  );
}


/**
 * Helper functions.
 */
function content_theme_get_themes() {

  static $themes = array();

  if (!$themes) {

    foreach (list_themes() as $name => $theme) {

      if (empty($theme->info['hidden']) || !$theme->info['hidden']) {
        $themes[$name] = array(
          'name' => $name,
          'label' => $theme->info['name'],
          'status' => $theme->status + 0,
        );
      }
    }
  }

  return $themes;
}

function content_theme_get_themes_list() {

  static $themes = array();

  if (!$themes) {

    foreach (content_theme_get_themes() as $theme) {
      if ($theme['status']) {
        $themes[$theme['name']] = $theme['label'];
      }
    }

    asort($themes, SORT_NATURAL | SORT_FLAG_CASE);
  }

  return $themes;
}

function content_theme_get_themes_options_content_wide() {

  $options['-system_default-'] = '<'. t('System default theme') .'>';
  $options += content_theme_get_themes_list();

  return $options;
}

function content_theme_get_themes_options_content_type() {

  $options['-system_default-'] = '<'. t('System default theme') .'>';
  $options['-content_wide-'] = '<'. t('Content wide theme') .'>';
  $options += content_theme_get_themes_list();

  return $options;
}

function content_theme_get_themes_options_content_node() {

  $options['-system_default-'] = '<'. t('System default theme') .'>';
  $options['-content_wide-'] = '<'. t('Content wide theme') .'>';
  $options['-content_type-'] = '<'. t('Content type theme') .'>';
  $options += content_theme_get_themes_list();

  return $options;
}

function content_theme_get_theme_label($theme, $expand = FALSE) {

  static $themes = array();

  if (!$themes) {

    $themes['-system_default-'] = array('label' => t('System default theme'), 'status' => 1);
    $themes['-content_wide-'] = array('label' => t('Content wide theme'), 'status' => 1);
    $themes['-content_type-'] = array('label' => t('Content type theme'), 'status' => 1);
    $themes += content_theme_get_themes();
  }

  if (isset($themes[$theme])) {
    $name = $expand && !$themes[$theme]['status'] ? check_plain($themes[$theme]['label']) . '<br><small>' . t('(Disabled)') . '</small>' : $themes[$theme]['label'];
  }
  else {
    $name = $expand ? $theme . '<br><small>' . t('(Not available)') . '</small>' : $theme;
  }

  return $name;
}

function content_theme_get_theme_label_placeholder($theme, $expand = FALSE, $placeholder = FALSE) {

  if ($theme == '-system_default-' || $theme == '-content_wide-' || $theme == '-content_type-' || $placeholder) {
    $label = backdrop_placeholder(content_theme_get_theme_label($theme));
  }
  else {
    $label = content_theme_get_theme_label($theme, $expand);
  }

  return $label;
}
