<?php

/**
 * @file
 * Install, update and uninstall functions for the content_theme module.
 */


/**
 * Implements hook_schema().
 */
function content_theme_schema() {

  $schema['content_theme_node'] = array(
    'description' => 'Stores themes which are assigned to content nodes.',
    'fields' => array(
      'ctnid' => array(
        'description' => 'Primary Key: Unique content theme node ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Node ID to which the editing and viewing themes are assigned.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'theme_edit' => array(
        'description' => 'Editing theme.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'theme_view' => array(
        'description' => 'Viewing theme.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('ctnid'),
    'unique keys' => array(
      'nid' => array('nid'),
    ),
  );

  return $schema;
}


/**
 * Implements hook_install().
 */
function content_theme_install() {

  // Set module's weight to 40.
  db_update('system')
    ->fields(array('weight' => 40))
    ->condition('name', 'content_theme')
    ->execute();

  // Add content type themes to node type config files.
  foreach (node_type_get_types() as $name => $type) {

    $settings = config_get('node.type.' . $name, 'settings');
    if (!isset($settings['content_theme_edit']) {
      $settings['content_theme_edit'] = '-content_wide-';
    }
    if (!isset($settings['content_theme_view']) {
      $settings['content_theme_view'] = '-content_wide-';
    }
    config_set('node.type.' . $name, 'settings', $settings);
  }
}


/**
 * Implements hook_uninstall().
 */
function content_theme_uninstall() {

  // Remove content type themes from node type config files.
  foreach (node_type_get_types() as $name => $type) {

    $settings = config_get('node.type.' . $name, 'settings');
    unset($settings['content_theme_edit']);
    unset($settings['content_theme_view']);
    config_set('node.type.' . $name, 'settings', $settings);
  }
}


/**
 * Implements hook_update_N().
 */

/**
 * Update from Drupal: Set module's weight to 40.
 */
function content_theme_update_1000() {

  db_update('system')
    ->fields(array('weight' => 40))
    ->condition('name', 'content_theme')
    ->execute();
}

/**
 * Update from Drupal: Create config file for content wide themes.
 */
function content_theme_update_1001() {

  $theme_edit = variable_get('content_theme_content_wide_edit', '0');
  $theme_view = variable_get('content_theme_content_wide_view', '0');

  config('content_theme.content_wide')
    ->setData(array(
      'content_theme_edit' => $theme_edit !== '0' ? $theme_edit : '-system_default-',
      'content_theme_view' => $theme_view !== '0' ? $theme_view : '-system_default-',
    ))
    ->save();

  variable_del('content_theme_content_wide_edit');
  variable_del('content_theme_content_wide_view');
}

/**
 * Update from Drupal: Add content type themes to config files of node types.
 */
function content_theme_update_1002() {

  foreach (node_type_get_types() as $name => $type) {

    $theme_edit = variable_get('content_theme_content_type_edit_' . $name, '-content_wide-');
    $theme_view = variable_get('content_theme_content_type_view_' . $name, '-content_wide-');

    config('node.type.' . $name)
      ->set('settings.content_theme_edit', $theme_edit !== '0' ? $theme_edit : '-system_default-')
      ->set('settings.content_theme_view', $theme_view !== '0' ? $theme_view : '-system_default-')
      ->save();

    variable_del('content_theme_content_type_edit_' . $name);
    variable_del('content_theme_content_type_view_' . $name);
  }
}

/**
 * Update from Drupal: Remove obsolete settings variables.
 */
function content_theme_update_1003() {

  variable_del('content_theme_content_wide_list');
  variable_del('content_theme_content_type_list');
  variable_del('content_theme_content_node_list');
}

/**
 * Update from Drupal: Update to new schema of {content_theme_node}.
 */
function content_theme_update_1004() {

  db_drop_index('content_theme_node', 'list');
  db_drop_unique_key('content_theme_node', 'node_action');

  db_add_field('content_theme_node', 'theme_edit', array(
    'description' => 'Editing theme.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
  db_add_field('content_theme_node', 'theme_view', array(
    'description' => 'Viewing theme.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));

  $prev_ctnid = 0;
  $prev_nid = 0;

  $result = db_query('SELECT * FROM {content_theme_node} ORDER BY nid');
  foreach ($result as $record) {

    if ($record->nid != $prev_nid) {
      // Update current row.
      $theme = $record->theme !== '0' ? $record->theme : '-system_default-';
      db_update('content_theme_node')
        ->fields(array(
          'theme_edit' => $record->action == 'edit' ? $theme : '-content_type-',
          'theme_view' => $record->action == 'view' ? $theme : '-content_type-',
        ))
        ->condition('ctnid', $record->ctnid)
        ->execute();

      $prev_ctnid = $record->ctnid;
      $prev_nid = $record->nid;
    }
    else {
      // Update previous row.
      $theme = $record->theme !== '0' ? $record->theme : '-system_default-';
      db_update('content_theme_node')
        ->fields(array(
          'theme_'. $record->action => $theme,
        ))
        ->condition('ctnid', $prev_ctnid)
        ->execute();
      // Delete current row.
      db_delete('content_theme_node')
        ->condition('ctnid', $record->ctnid)
        ->execute();
    }
  }

  db_drop_field('content_theme_node', 'action');
  db_drop_field('content_theme_node', 'theme');

  db_add_unique_key('content_theme_node', 'nid', array('nid'));
}
